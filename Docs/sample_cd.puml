@@startuml

MonsterController -u> Monster
SpecificDecorator <- MonsterController
MonsterController -d-> MonsterAttributes
MonsterAttributes --|> Attributes
GameController -l-> MonsterController
GameController *-- Monster
UI --* GameController
SpecificDecorator --|> Attributes
SpecificDecorator -u-|> IDecorator
Attributes -r-* Monster

class Monster{
    - Attributes _attr
    + void Buff(IDecorator)
    + event HasTakenDamage
    + void OnAttacked(int dmg)
    + void Attack(Monster target)
}


class SpecificDecorator{
    - Attributes
    + void TakeDamage()
}

class GameController{
    - MonsterController _mCtrl
    - UI _ui
    - Monster player
    - Monster monster
    + void ProcessTurn()
    // Events
    + event MonsterAttack
    + event MonsterTookDmg
}

class Attributes <<abstract>>{
    + int Hp
    + float Size
    + int TakeDamage(int damage)
    // etc
}

class MonsterAttributes{
    + int Hp
    + float Size
    + int TakeDamage(int damage)
    // etc
}

interface IDecorator{
    // Specifies that a function should
    // CHANGE an existing monster
}

class MonsterController{
    - Random rand
    // Spawn monsters, buff monsters etc
    // Has sole access to applying decorators
    + Monster SpawnMonster()
    + Buff(Monster target, IDecorator dec)
}



class UI{
    + void Display(string)
    + void ClearScreen()
    + void Render(Attributes, Attributes)
}


@@enduml